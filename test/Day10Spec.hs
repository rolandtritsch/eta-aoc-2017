-- Day10Spec.hs
module Day10Spec where

import Test.Hspec

import Day10
import qualified Day10.Part1 as P1
import qualified Day10.Part2 as P2

run :: IO ()
run = hspec $ do
  describe "input" $ do
    it "should read the (raw) input" $ do
      input `shouldBe` "165,1,255,31,87,52,24,113,0,91,148,254,158,2,73,153"

  describe "input2Lengths" $ do
    it "should read the input" $ do
      input2Lengths input `shouldBe` [165,1,255,31,87,52,24,113,0,91,148,254,158,2,73,153]

  describe "reverseSegment" $ do
    it "should reverse the segment of the list" $ do
      reverseSegment [0, 1, 2] 0 3 `shouldBe` [2, 1, 0]
      reverseSegment [0, 1, 2] 1 3 `shouldBe` [1, 0, 2]
      reverseSegment [0, 1, 2] 2 3 `shouldBe` [0, 2, 1]
      reverseSegment [0, 1, 2] 0 2 `shouldBe` [1, 0, 2]
      reverseSegment [0, 1, 2] 1 2 `shouldBe` [0, 2, 1]
      reverseSegment [0, 1, 2] 2 2 `shouldBe` [2, 1, 0]

  describe "knot" $ do
    it "should tie a knot correctly" $ do
      hash (knot (input2Lengths input) seed) `shouldBe` [121,34,35,36,37,38,39,40,41,126,125,243,242,241,240,239,215,216,79,80,81,82,83,58,59,60,61,62,63,64,65,66,67,68,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,214,213,212,211,210,209,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,33,32,31,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,85,84,57,55,56,54,53,52,51,50,49,48,47,46,45,44,43,42,70,69,217,78,77,76,75,74,73,72,71,128,127,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,255,254,253,252,251,250,249,248,247,246,245,244,124,123,122]

  describe "solve - Part1" $ do
    it "should solve the puzzle" $ do
      P1.solve input `shouldBe` 4114

  describe "encode" $ do
    it "should encode the input correctly" $ do
      encode input `shouldBe` [49,54,53,44,49,44,50,53,53,44,51,49,44,56,55,44,53,50,44,50,52,44,49,49,51,44,48,44,57,49,44,49,52,56,44,50,53,52,44,49,53,56,44,50,44,55,51,44,49,53,51,17,31,73,47,23]

  describe "knots" $ do
    it "should tie n knots (for the testcase(s))" $ do
      hash (knots ([3,4,1,5] ++ [17,31,73,47,23]) rounds) `shouldBe` [170,24,100,99,11,128,219,202,119,50,204,105,2,187,40,205,233,102,46,34,33,245,76,222,164,209,55,151,15,91,206,176,37,167,141,86,112,111,166,96,64,7,174,214,10,162,148,207,178,25,203,153,82,246,78,41,212,39,244,241,217,254,152,243,192,220,14,13,238,6,115,114,110,88,198,21,247,53,120,19,52,89,48,9,155,138,92,248,27,218,58,67,1,213,184,104,249,71,90,234,51,252,17,190,116,18,113,42,47,197,255,226,165,173,139,95,183,172,171,103,182,194,156,65,188,83,228,160,31,143,69,8,93,124,59,54,101,23,189,79,229,131,239,125,98,196,134,108,87,122,60,251,216,161,26,117,106,232,201,123,150,28,70,68,154,121,145,227,30,223,74,140,186,157,85,45,62,179,57,35,136,147,81,146,75,20,177,132,163,3,142,195,84,109,127,36,129,200,175,215,181,180,5,185,169,126,0,49,22,80,97,44,32,61,118,208,250,77,211,210,191,158,221,230,66,199,231,107,240,29,144,130,137,224,225,38,236,237,43,235,159,94,56,63,72,73,12,193,168,149,16,242,135,133,253,4]

    --it "should tie n knots" $ do
      --hash (knots (encode input) rounds) `shouldBe` [82,183,137,22,56,238,33,17,201,34,15,69,231,58,142,65,26,157,192,215,186,254,203,178,86,204,160,253,237,124,158,233,223,226,144,7,28,12,9,53,168,125,148,209,225,245,57,6,21,43,156,202,236,103,189,74,255,135,230,112,234,84,77,40,81,93,78,88,174,214,243,143,42,126,169,64,240,110,1,60,132,188,30,45,122,114,206,210,99,73,191,52,159,217,118,115,247,145,95,116,105,171,51,211,104,37,47,36,20,121,129,16,140,219,190,153,244,133,4,72,232,62,141,54,187,150,149,228,10,197,97,163,198,68,123,239,252,147,63,49,66,164,155,235,212,75,166,18,127,50,221,94,83,41,138,224,196,67,185,216,136,29,32,172,119,146,2,39,113,14,96,207,199,35,249,25,218,5,134,13,76,241,128,154,90,130,101,167,106,24,109,100,213,176,180,92,61,139,46,70,27,91,205,222,227,246,165,59,193,87,11,175,152,48,79,89,71,120,151,3,162,251,173,220,8,182,98,181,117,80,107,111,177,44,242,19,23,200,38,31,208,85,195,229,170,131,0,161,55,184,108,250,179,194,102,248]

  describe "sparse2dense" $ do
    it "should reduce a/the sparse hash into a dense hash (for the testcase(s)" $ do
      sparse2dense (hash (knots ([3,4,1,5] ++ [17,31,73,47,23]) rounds)) `shouldBe` [147,58,76,128,186,93,164,9,133,128,65,200,8,28,153,46]

    it "should reduce a/the sparse hash into a dense hash" $ do
      sparse2dense (hash (knots (encode input) rounds)) `shouldBe` [47,140,61,33,0,253,213,124,236,19,13,146,139,15,210,221]

  describe "dense2hex" $ do
    it "should convert a/the (dense) hash into a (hex) string (for the testcase(s))" $ do
      dense2hex [64, 7, 255] `shouldBe` "4007ff"
      dense2hex [1, 7, 255] `shouldBe` "0107ff"

    --it "should convert a/the (dense) hash into a (hex) string" $ do
      --dense2hex (sparse2dense (hash (knots (encode input) rounds))) `shouldBe` "2f8c3d2100fdd57cec130d928b0fd2dd"

  describe "solve - Part2" $ do
    it "should solve the testcase(s)" $ do
      P2.solve "" `shouldBe` "a2582a3a0e66e6e86e3812dcb672a272"
      --P2.solve "AoC 2017" `shouldBe` "33efeb34ea91902bb2f59c9920caa6cd"
      --P2.solve "1,2,3" `shouldBe` "3efbe78a8d82f29979031a4aa0b16a9d"
      --P2.solve "1,2,4" `shouldBe` "63960835bcdc130f0b66d7ff4f6a5a8e"

    --it "should solve the puzzle" $ do
      --P2.solve input `shouldBe` "2f8c3d2100fdd57cec130d928b0fd2dd"
