-- Day10Spec.hs
module Day10Spec where

import Test.Hspec

import Day10
import qualified Day10.Part1 as P1
import qualified Day10.Part2 as P2

run :: IO ()
run = hspec $ do
  describe "input" $ do
    it "should read the (raw) input" $ do
      input `shouldBe` "165,1,255,31,87,52,24,113,0,91,148,254,158,2,73,153"

  describe "input2Lengths" $ do
    it "should read the input" $ do
      input2Lengths input `shouldBe` [165,1,255,31,87,52,24,113,0,91,148,254,158,2,73,153]

  describe "reverseSegment" $ do
    it "should reverse the segment of the list" $ do
      reverseSegment [0, 1, 2] 0 3 `shouldBe` [2, 1, 0]
      reverseSegment [0, 1, 2] 1 3 `shouldBe` [1, 0, 2]
      reverseSegment [0, 1, 2] 2 3 `shouldBe` [0, 2, 1]
      reverseSegment [0, 1, 2] 0 2 `shouldBe` [1, 0, 2]
      reverseSegment [0, 1, 2] 1 2 `shouldBe` [0, 2, 1]
      reverseSegment [0, 1, 2] 2 2 `shouldBe` [2, 1, 0]

  describe "knot" $ do
    it "should tie a knot correctly" $ do
      hash (knot (input2Lengths input) seed) `shouldBe` [121,34,35,36,37,38,39,40,41,126,125,243,242,241,240,239,215,216,79,80,81,82,83,58,59,60,61,62,63,64,65,66,67,68,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,214,213,212,211,210,209,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,33,32,31,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,85,84,57,55,56,54,53,52,51,50,49,48,47,46,45,44,43,42,70,69,217,78,77,76,75,74,73,72,71,128,127,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,255,254,253,252,251,250,249,248,247,246,245,244,124,123,122]

  describe "solve - Part1" $ do
    it "should solve the puzzle" $ do
      P1.solve input `shouldBe` 4114

  describe "encode" $ do
    it "should encode the input correctly" $ do
      encode input `shouldBe` [49,54,53,44,49,44,50,53,53,44,51,49,44,56,55,44,53,50,44,50,52,44,49,49,51,44,48,44,57,49,44,49,52,56,44,50,53,52,44,49,53,56,44,50,44,55,51,44,49,53,51,17,31,73,47,23]

  describe "knots" $ do
    it "should tie n knots (for the testcase(s))" $ do
      hash (knots ([3,4,1,5] ++ [17,31,73,47,23]) rounds) `shouldBe` [170,24,100,99,11,128,219,202,119,50,204,105,2,187,40,205,233,102,46,34,33,245,76,222,164,209,55,151,15,91,206,176,37,167,141,86,112,111,166,96,64,7,174,214,10,162,148,207,178,25,203,153,82,246,78,41,212,39,244,241,217,254,152,243,192,220,14,13,238,6,115,114,110,88,198,21,247,53,120,19,52,89,48,9,155,138,92,248,27,218,58,67,1,213,184,104,249,71,90,234,51,252,17,190,116,18,113,42,47,197,255,226,165,173,139,95,183,172,171,103,182,194,156,65,188,83,228,160,31,143,69,8,93,124,59,54,101,23,189,79,229,131,239,125,98,196,134,108,87,122,60,251,216,161,26,117,106,232,201,123,150,28,70,68,154,121,145,227,30,223,74,140,186,157,85,45,62,179,57,35,136,147,81,146,75,20,177,132,163,3,142,195,84,109,127,36,129,200,175,215,181,180,5,185,169,126,0,49,22,80,97,44,32,61,118,208,250,77,211,210,191,158,221,230,66,199,231,107,240,29,144,130,137,224,225,38,236,237,43,235,159,94,56,63,72,73,12,193,168,149,16,242,135,133,253,4]

    it "should tie n knots" $ do
      hash (knots (input2Lengths input) rounds) `shouldBe` [64,236,72,127,97,198,87,3,134,161,50,165,46,175,121,217,95,117,237,133,239,36,25,85,247,48,98,63,138,168,160,0,211,73,124,22,126,238,185,215,112,172,135,54,177,66,253,101,74,206,158,169,214,144,12,122,202,62,189,118,20,1,103,188,166,213,183,69,246,251,96,234,79,163,55,13,181,15,47,70,141,222,107,120,4,180,109,157,221,89,148,8,152,59,190,93,131,90,11,240,113,255,92,204,45,182,106,207,38,155,94,6,146,68,178,26,205,82,147,250,77,125,39,31,35,58,230,192,111,220,194,137,40,197,44,60,104,18,132,41,16,129,28,201,156,225,105,34,203,184,139,142,23,210,191,170,209,84,153,226,232,33,116,233,83,167,29,67,179,212,196,32,91,99,14,78,7,241,229,88,249,199,227,9,150,21,37,108,115,245,254,159,154,65,75,151,228,5,136,224,52,193,10,140,162,43,200,235,123,173,231,86,114,17,51,176,42,130,216,30,242,219,19,71,102,143,57,208,49,187,128,164,145,76,119,248,61,80,244,174,218,110,24,27,100,53,195,2,56,252,186,171,223,243,149,81]

  describe "sparse2dense" $ do
    it "should reduce a/the sparse hash into a dense hash (for the testcase(s)" $ do
      sparse2dense (hash (knots ([3,4,1,5] ++ [17,31,73,47,23]) rounds)) `shouldBe` [147,58,76,128,186,93,164,9,133,128,65,200,8,28,153,46]

    it "should reduce a/the sparse hash into a dense hash" $ do
      sparse2dense (hash (knots (input2Lengths input) rounds)) `shouldBe` [249,221,8,114,3,88,231,191,150,110,5,178,87,148,203,26]

  describe "dense2hex" $ do
    it "should convert a/the (dense) hash into a (hex) string (for the testcase(s))" $ do
      dense2hex [64, 7, 255] `shouldBe` "4007ff"
      dense2hex [1, 7, 255] `shouldBe` "0107ff"

    it "should convert a/the (dense) hash into a (hex) string" $ do
      dense2hex (sparse2dense (hash (knots (encode input) rounds))) `shouldBe` "2f8c3d2100fdd57cec130d928b0fd2dd"

  describe "solve - Part2" $ do
    it "should solve the testcase(s)" $ do
      P2.solve "" `shouldBe` "a2582a3a0e66e6e86e3812dcb672a272"
      P2.solve "AoC 2017" `shouldBe` "33efeb34ea91902bb2f59c9920caa6cd"
      P2.solve "1,2,3" `shouldBe` "3efbe78a8d82f29979031a4aa0b16a9d"
      P2.solve "1,2,4" `shouldBe` "63960835bcdc130f0b66d7ff4f6a5a8e"

    it "should solve the puzzle" $ do
      P2.solve input `shouldBe` "2f8c3d2100fdd57cec130d928b0fd2dd"
